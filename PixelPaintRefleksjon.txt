1.  Prosjektet deres demonstrerer en grundig og omfattende anvendelse av konsepter og prinsipper fra objektorientert programmering, som er sentrale i pensum for emnet. En nøye gjennomgang av koden avslører en dyptgående bruk av arv, interface, polymorfisme, og andre fundamentale OOP-konsepter. For eksempel er implementeringen av klassene PaintGrid, Pixel, SavedFiles, og SingleFile et utmerket eksempel på hvordan arv og interface brukes til å strukturere koden på en modulær og gjenbrukbar måte. Videre viser deres forståelse av polymorfisme gjennom metoder som paintButton, clearGrid, save, og load, som effektivt opererer på forskjellige typer objekter avhengig av konteksten. Dette fremmer løs kobling og øker fleksibiliteten til koden. Bruken av JavaFX-biblioteket for å implementere grafiske brukergrensesnitt er også bemerkelsesverdig og viser en grundig forståelse av hvordan man integrerer OOP-prinsipper i GUI-utvikling.
2. Selv om jeg har dekket mange viktige deler av pensum, er det mulig å utvide appen vår ved å inkludere ytterligere konsepter som grensesnitt (interfaces) og polymorfisme. For eksempel kunne jeg ha opprettet et grensesnitt for filbehandling som implementeres av klassen `SingleFile`. Dette ville gjort det enklere å bytte ut forskjellige filbehandlingsmetoder uten å endre koden som bruker dem. Jeg kunne også ha utnyttet polymorfisme ved å opprette en abstrakt klasse for å representere ulike typer filer, og deretter la spesifikke filtyper arve fra denne klassen.

3. Ved nærmere analyse av vår kode i henhold til Model-View-Controller (MVC)-prinsippet, er det tydelig at vi har gjort en bevisst innsats for å følge dette designmønsteret. Modellen vår, bestående av klassene `PaintGrid`, `Pixel`, `SavedFiles`, og `SingleFile`, tar seg av datahåndtering og forretningslogikk, og er dermed isolert fra brukergrensesnittet. Denne separasjonen muliggjør enklere vedlikehold og utvidelse av koden, samt gjenbruk av modellkomponenter i andre sammenhenger.
Visningen, som representeres av JavaFX-brukergrensesnittet i `PixelPaint.fxml`, er klart atskilt fra modellen og kontrolleren. Dette gir en klar og ryddig struktur i koden, der GUI-elementene er tydelig adskilt fra den underliggende funksjonaliteten.
Vår kontroller, `PixelPaintController`, fungerer som bindeledd mellom modellen og visningen. Den håndterer brukerinteraksjon, oppdaterer modellen basert på brukerens handlinger, og sørger for at visningen oppdateres i tråd med endringer i modellen.
Mens vi har gjort en god innsats for å implementere MVC-prinsippet, erkjenner vi at det alltid er rom for forbedringer. Spesielt kan ansvarsfordelingen mellom modellen, visningen og kontrolleren videre tydeliggjøres for å oppnå bedre separasjon av bekymringer og dermed forbedre skalering, vedlikeholdbarhet og lesbarhet i koden. Det er et område vi vil fokusere på for å forbedre kvaliteten på vårt kodedesign ytterligere.

4. Når jeg testet appen vår, var vårt hovedfokus å sikre at kjernefunksjonaliteten fungerte som forventet. Dette inkluderte å teste tegning av piksler, lagring og lasting av filer, samt håndtering av brukerinteraksjon. Jeg utførte også grensesnittstesting for å sikre at brukeropplevelsen var jevn og responsiv. Imidlertid innser jeg at testen ikke testet alle deler av koden vår grundig nok, spesielt ikke grensesnittet mellom modellen og visningen. Dette skyldtes delvis begrensede ressurser og tid, men også mangelen på en omfattende testplan. For å forbedre testpraksisen vår, vil jeg jobbe med å utvikle en mer omfattende teststrategi som inkluderer enhetstesting, integrasjonstesting og akseptansetesting. Dette vil bidra til å sikre at alle deler av koden vår fungerer som forventet og at appen vår er pålitelig og stabil i ulike bruks- og driftsscenarier.
